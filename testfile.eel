let num1: number = +1 - -2 + -+-+3;
let num2: number = (77);
let num3: number;
num3 = 8;
let num4: number;
num4 = (num1 + num2) ** 2 / ((4 + 3) - 5 * 1.1) % 100;

let bool1: bool = false;
let bool2: bool = true;
let bool3: bool;
bool3 = (false);
let bool4: bool = num3 < 7 || (false);
let bool5: bool = num2 == 77 // 1;
let bool6: bool = 101 != num2 && (((100 - 82) ** 0) == 1);
let bool7: bool = (((100 - 82) ** 0) == 1);
bool7 = !bool7;

bool7 = null;
let num5: number = null;
let s1: string = "asdf";
let s2: string = "asdf2";
let s3: string = "asdf";
bool7 = s1 != s2;
bool7 = s1 == s3;
bool7 = s1 < s3;
bool7 = s1 <= s3;
bool7 = s1 >= s3;

let arr1: array = [1, 2, 3, 4,];
let arr2: array = [1, 2, [3, 4], true, 4 + 5 - (2 ** 2), "asdf", num2];
let arr3: array = [1, 2, 3, 4];
let arr4: array = [1, 2, 3];
bool7 = arr1 == arr3;
bool7 = arr2 != arr2;
bool7 = arr4 <= arr3;
bool7 = arr4 > arr3;

arr1[0] = "qwerty";
arr2[2][-1] = "asdf";
let num6: number = arr2[2][0];
let asdf: string = arr2[2][1];
let num8: number = 1;
let num7: number = [1, 2, 3, 4][num8 + 1 / ((543 % 343) ** 0)];

struct s1 {
    f1: string
};

struct s2 {
    f1: string,
    f2: number,
    f3: array,
    f4: bool,
    f5: struct s1,
};

let s1Instance: struct s1;
let s2Instance: struct s2;
s1Instance.f1 = "asdf";
let str: string = s1Instance.f1;
s2Instance.f2 = num6;
s2Instance.f3 = arr1;
s2Instance.f4 = 101 != num2 && (((100 - 82) ** 0) == 1);
s2Instance.f5 = s1Instance;
arr1[0] = s1Instance;
let arr5: array = [1, 2, [3, s1Instance]];
let s1Instance2: struct s1 = arr5[2][-1];
s1Instance2.f1 = "qwert";
let qwert: string = s1Instance.f1;
s1Instance.f1 = "qwert2";
let qwert2: string = s2Instance.f3[0].f1;
# comment

if (num1 > 100) { }
else {
    let num2: number = 9000;
    num2 = 8004;
}

if (num1 < 100) {
    num2 = 9000;
}

if (false) {
    num1 = false;
}
else if (true) {
    bool7 = null;
}
else {
    bool7 = true;
}

let iters: number = 0;
while ("a" < "b") {
    iters = iters + 1;
    num1 = num1 + 2;
    if (num1 < 12) {
        continue;
    }
    else {
        break;
    }
}

let inclusiveStop: number = 2;
for i in [0, inclusiveStop] {
    let num: number = i;
    let elem: number = arr4[i];
}

fn testFunction(p1: number, p2: string): array {
    for i in [1, 4] {
        let asdf: number = 10 ** i;
        num1 = asdf;
        p1 = p1 + i;
    }
    return [p1];
}

print(print(4));
print(members(s2Instance)[0], len(s2Instance.f2));